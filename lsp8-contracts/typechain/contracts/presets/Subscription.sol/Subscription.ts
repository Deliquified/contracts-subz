/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface SubscriptionInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "chargeSubscribers"
      | "createTier"
      | "getTierDetails"
      | "isSubscribed"
      | "owner"
      | "protocolAddress"
      | "protocolFee"
      | "recipient"
      | "stablecoin"
      | "subscribe"
      | "subscribers"
      | "subscriptionName"
      | "tiers"
      | "tokenDecimals"
      | "totalTiers"
      | "universalReceiver"
      | "unsubscribe"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "PaymentSent"
      | "Subscribed"
      | "SubscriptionTierCreated"
      | "SubscriptionTierDeactivated"
      | "SubscriptionTierUpdated"
      | "UniversalReceiver"
      | "Unsubscribed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "chargeSubscribers",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createTier",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTierDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isSubscribed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "protocolAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "recipient", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stablecoin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "subscribe",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "subscribers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "subscriptionName",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "tiers", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "tokenDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalTiers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "universalReceiver",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unsubscribe",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "chargeSubscribers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createTier", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTierDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSubscribed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "recipient", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stablecoin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "subscribe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "subscribers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscriptionName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tiers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalTiers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "universalReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unsubscribe",
    data: BytesLike
  ): Result;
}

export namespace PaymentSentEvent {
  export type InputTuple = [
    user: AddressLike,
    amount: BigNumberish,
    fee: BigNumberish
  ];
  export type OutputTuple = [user: string, amount: bigint, fee: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscribedEvent {
  export type InputTuple = [
    user: AddressLike,
    tierId: BigNumberish,
    expiry: BigNumberish
  ];
  export type OutputTuple = [user: string, tierId: bigint, expiry: bigint];
  export interface OutputObject {
    user: string;
    tierId: bigint;
    expiry: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscriptionTierCreatedEvent {
  export type InputTuple = [
    tierId: BigNumberish,
    name: string,
    price: BigNumberish
  ];
  export type OutputTuple = [tierId: bigint, name: string, price: bigint];
  export interface OutputObject {
    tierId: bigint;
    name: string;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscriptionTierDeactivatedEvent {
  export type InputTuple = [tierId: BigNumberish];
  export type OutputTuple = [tierId: bigint];
  export interface OutputObject {
    tierId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscriptionTierUpdatedEvent {
  export type InputTuple = [
    tierId: BigNumberish,
    name: string,
    price: BigNumberish
  ];
  export type OutputTuple = [tierId: bigint, name: string, price: bigint];
  export interface OutputObject {
    tierId: bigint;
    name: string;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UniversalReceiverEvent {
  export type InputTuple = [
    from: AddressLike,
    value: BigNumberish,
    typeId: BytesLike,
    receivedData: BytesLike,
    returnedValue: BytesLike
  ];
  export type OutputTuple = [
    from: string,
    value: bigint,
    typeId: string,
    receivedData: string,
    returnedValue: string
  ];
  export interface OutputObject {
    from: string;
    value: bigint;
    typeId: string;
    receivedData: string;
    returnedValue: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnsubscribedEvent {
  export type InputTuple = [user: AddressLike];
  export type OutputTuple = [user: string];
  export interface OutputObject {
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Subscription extends BaseContract {
  connect(runner?: ContractRunner | null): Subscription;
  waitForDeployment(): Promise<this>;

  interface: SubscriptionInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  chargeSubscribers: TypedContractMethod<
    [users: AddressLike[]],
    [void],
    "nonpayable"
  >;

  createTier: TypedContractMethod<
    [_name: string, _price: BigNumberish],
    [void],
    "nonpayable"
  >;

  getTierDetails: TypedContractMethod<
    [_tierId: BigNumberish],
    [
      [string, bigint, boolean] & {
        name: string;
        price: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  isSubscribed: TypedContractMethod<[user: AddressLike], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  protocolAddress: TypedContractMethod<[], [string], "view">;

  protocolFee: TypedContractMethod<[], [bigint], "view">;

  recipient: TypedContractMethod<[], [string], "view">;

  stablecoin: TypedContractMethod<[], [string], "view">;

  subscribe: TypedContractMethod<[_tierId: BigNumberish], [void], "nonpayable">;

  subscribers: TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, bigint, bigint] & {
        isActive: boolean;
        expiry: bigint;
        tierId: bigint;
      }
    ],
    "view"
  >;

  subscriptionName: TypedContractMethod<[], [string], "view">;

  tiers: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, boolean] & {
        name: string;
        price: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  tokenDecimals: TypedContractMethod<[], [bigint], "view">;

  totalTiers: TypedContractMethod<[], [bigint], "view">;

  universalReceiver: TypedContractMethod<
    [typeId: BytesLike, data: BytesLike],
    [string],
    "payable"
  >;

  unsubscribe: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "chargeSubscribers"
  ): TypedContractMethod<[users: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createTier"
  ): TypedContractMethod<
    [_name: string, _price: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getTierDetails"
  ): TypedContractMethod<
    [_tierId: BigNumberish],
    [
      [string, bigint, boolean] & {
        name: string;
        price: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "isSubscribed"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "protocolAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "protocolFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "recipient"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "stablecoin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "subscribe"
  ): TypedContractMethod<[_tierId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "subscribers"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, bigint, bigint] & {
        isActive: boolean;
        expiry: bigint;
        tierId: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "subscriptionName"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tiers"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, boolean] & {
        name: string;
        price: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "tokenDecimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalTiers"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "universalReceiver"
  ): TypedContractMethod<
    [typeId: BytesLike, data: BytesLike],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "unsubscribe"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "PaymentSent"
  ): TypedContractEvent<
    PaymentSentEvent.InputTuple,
    PaymentSentEvent.OutputTuple,
    PaymentSentEvent.OutputObject
  >;
  getEvent(
    key: "Subscribed"
  ): TypedContractEvent<
    SubscribedEvent.InputTuple,
    SubscribedEvent.OutputTuple,
    SubscribedEvent.OutputObject
  >;
  getEvent(
    key: "SubscriptionTierCreated"
  ): TypedContractEvent<
    SubscriptionTierCreatedEvent.InputTuple,
    SubscriptionTierCreatedEvent.OutputTuple,
    SubscriptionTierCreatedEvent.OutputObject
  >;
  getEvent(
    key: "SubscriptionTierDeactivated"
  ): TypedContractEvent<
    SubscriptionTierDeactivatedEvent.InputTuple,
    SubscriptionTierDeactivatedEvent.OutputTuple,
    SubscriptionTierDeactivatedEvent.OutputObject
  >;
  getEvent(
    key: "SubscriptionTierUpdated"
  ): TypedContractEvent<
    SubscriptionTierUpdatedEvent.InputTuple,
    SubscriptionTierUpdatedEvent.OutputTuple,
    SubscriptionTierUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "UniversalReceiver"
  ): TypedContractEvent<
    UniversalReceiverEvent.InputTuple,
    UniversalReceiverEvent.OutputTuple,
    UniversalReceiverEvent.OutputObject
  >;
  getEvent(
    key: "Unsubscribed"
  ): TypedContractEvent<
    UnsubscribedEvent.InputTuple,
    UnsubscribedEvent.OutputTuple,
    UnsubscribedEvent.OutputObject
  >;

  filters: {
    "PaymentSent(address,uint256,uint256)": TypedContractEvent<
      PaymentSentEvent.InputTuple,
      PaymentSentEvent.OutputTuple,
      PaymentSentEvent.OutputObject
    >;
    PaymentSent: TypedContractEvent<
      PaymentSentEvent.InputTuple,
      PaymentSentEvent.OutputTuple,
      PaymentSentEvent.OutputObject
    >;

    "Subscribed(address,uint256,uint256)": TypedContractEvent<
      SubscribedEvent.InputTuple,
      SubscribedEvent.OutputTuple,
      SubscribedEvent.OutputObject
    >;
    Subscribed: TypedContractEvent<
      SubscribedEvent.InputTuple,
      SubscribedEvent.OutputTuple,
      SubscribedEvent.OutputObject
    >;

    "SubscriptionTierCreated(uint256,string,uint256)": TypedContractEvent<
      SubscriptionTierCreatedEvent.InputTuple,
      SubscriptionTierCreatedEvent.OutputTuple,
      SubscriptionTierCreatedEvent.OutputObject
    >;
    SubscriptionTierCreated: TypedContractEvent<
      SubscriptionTierCreatedEvent.InputTuple,
      SubscriptionTierCreatedEvent.OutputTuple,
      SubscriptionTierCreatedEvent.OutputObject
    >;

    "SubscriptionTierDeactivated(uint256)": TypedContractEvent<
      SubscriptionTierDeactivatedEvent.InputTuple,
      SubscriptionTierDeactivatedEvent.OutputTuple,
      SubscriptionTierDeactivatedEvent.OutputObject
    >;
    SubscriptionTierDeactivated: TypedContractEvent<
      SubscriptionTierDeactivatedEvent.InputTuple,
      SubscriptionTierDeactivatedEvent.OutputTuple,
      SubscriptionTierDeactivatedEvent.OutputObject
    >;

    "SubscriptionTierUpdated(uint256,string,uint256)": TypedContractEvent<
      SubscriptionTierUpdatedEvent.InputTuple,
      SubscriptionTierUpdatedEvent.OutputTuple,
      SubscriptionTierUpdatedEvent.OutputObject
    >;
    SubscriptionTierUpdated: TypedContractEvent<
      SubscriptionTierUpdatedEvent.InputTuple,
      SubscriptionTierUpdatedEvent.OutputTuple,
      SubscriptionTierUpdatedEvent.OutputObject
    >;

    "UniversalReceiver(address,uint256,bytes32,bytes,bytes)": TypedContractEvent<
      UniversalReceiverEvent.InputTuple,
      UniversalReceiverEvent.OutputTuple,
      UniversalReceiverEvent.OutputObject
    >;
    UniversalReceiver: TypedContractEvent<
      UniversalReceiverEvent.InputTuple,
      UniversalReceiverEvent.OutputTuple,
      UniversalReceiverEvent.OutputObject
    >;

    "Unsubscribed(address)": TypedContractEvent<
      UnsubscribedEvent.InputTuple,
      UnsubscribedEvent.OutputTuple,
      UnsubscribedEvent.OutputObject
    >;
    Unsubscribed: TypedContractEvent<
      UnsubscribedEvent.InputTuple,
      UnsubscribedEvent.OutputTuple,
      UnsubscribedEvent.OutputObject
    >;
  };
}
