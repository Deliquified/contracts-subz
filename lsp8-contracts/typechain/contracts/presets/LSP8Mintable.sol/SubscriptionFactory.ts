/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface SubscriptionFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createSubscription"
      | "creatorSubscriptions"
      | "getCreatorSubscriptions"
      | "isCreatorOfSubscription"
      | "isSubscriptionContract"
      | "subscriptionCreator"
      | "withdrawProtocolFees"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "SubscriptionCreated"): EventFragment;

  encodeFunctionData(
    functionFragment: "createSubscription",
    values: [string, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "creatorSubscriptions",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreatorSubscriptions",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isCreatorOfSubscription",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isSubscriptionContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "subscriptionCreator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawProtocolFees",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "createSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creatorSubscriptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreatorSubscriptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCreatorOfSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSubscriptionContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscriptionCreator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawProtocolFees",
    data: BytesLike
  ): Result;
}

export namespace SubscriptionCreatedEvent {
  export type InputTuple = [
    contractAddress: AddressLike,
    owner: AddressLike,
    name: string
  ];
  export type OutputTuple = [
    contractAddress: string,
    owner: string,
    name: string
  ];
  export interface OutputObject {
    contractAddress: string;
    owner: string;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SubscriptionFactory extends BaseContract {
  connect(runner?: ContractRunner | null): SubscriptionFactory;
  waitForDeployment(): Promise<this>;

  interface: SubscriptionFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createSubscription: TypedContractMethod<
    [name: string, recipient: AddressLike, stablecoin: AddressLike],
    [string],
    "nonpayable"
  >;

  creatorSubscriptions: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  getCreatorSubscriptions: TypedContractMethod<
    [creator: AddressLike],
    [string[]],
    "view"
  >;

  isCreatorOfSubscription: TypedContractMethod<
    [subscriptionAddress: AddressLike, creator: AddressLike],
    [boolean],
    "view"
  >;

  isSubscriptionContract: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  subscriptionCreator: TypedContractMethod<
    [arg0: AddressLike],
    [string],
    "view"
  >;

  withdrawProtocolFees: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createSubscription"
  ): TypedContractMethod<
    [name: string, recipient: AddressLike, stablecoin: AddressLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "creatorSubscriptions"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCreatorSubscriptions"
  ): TypedContractMethod<[creator: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "isCreatorOfSubscription"
  ): TypedContractMethod<
    [subscriptionAddress: AddressLike, creator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isSubscriptionContract"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "subscriptionCreator"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "withdrawProtocolFees"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "SubscriptionCreated"
  ): TypedContractEvent<
    SubscriptionCreatedEvent.InputTuple,
    SubscriptionCreatedEvent.OutputTuple,
    SubscriptionCreatedEvent.OutputObject
  >;

  filters: {
    "SubscriptionCreated(address,address,string)": TypedContractEvent<
      SubscriptionCreatedEvent.InputTuple,
      SubscriptionCreatedEvent.OutputTuple,
      SubscriptionCreatedEvent.OutputObject
    >;
    SubscriptionCreated: TypedContractEvent<
      SubscriptionCreatedEvent.InputTuple,
      SubscriptionCreatedEvent.OutputTuple,
      SubscriptionCreatedEvent.OutputObject
    >;
  };
}
